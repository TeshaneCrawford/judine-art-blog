---
interface SunriseSunsetData {
  results: {
    sunrise: string;
    sunset: string;
  };
  status: string;
}

// Get coordinates (you might want to replace these with dynamic values)
const latitude = '40.730610';
const longitude = '-73.935242';

// Initial fetch of sunrise/sunset data
const response = await fetch(
  `https://api.sunrisesunset.io/json?lat=${latitude}&lng=${longitude}&date=today`
);
const data: SunriseSunsetData = await response.json();

// Get initial values
const now = new Date();
const timezone = new Intl.DateTimeFormat('en', {
  timeZoneName: 'short'
}).formatToParts(now).find(part => part.type === 'timeZoneName')?.value || '';
---

<div 
  class="time-badge" 
  data-sunrise={data.results.sunrise} 
  data-sunset={data.results.sunset}
  data-latitude={latitude}
  data-longitude={longitude}
>
  <span class="icon">
    <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="12" cy="12" r="5"/>
      <line x1="12" y1="1" x2="12" y2="3"/>
      <line x1="12" y1="21" x2="12" y2="23"/>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
      <line x1="1" y1="12" x2="3" y2="12"/>
      <line x1="21" y1="12" x2="23" y2="12"/>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
    </svg>
    <svg class="moon-icon hidden" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
    </svg>
  </span>
  <span class="time"></span>
  <!-- <span class="timezone">{timezone}</span> -->
</div>

<style>
  .time-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background-color: #fafafa;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    color: #374151;
    /* box-shadow: 0 1px 2px rgba(231, 226, 226, 0.05); */
  }

  .icon {
    display: flex;
    align-items: center;
  }

  .time {
    font-weight: 500;
  }

  .timezone {
    font-size: 0.75rem;
    color: #6b7280;
  }

  .hidden {
    display: none;
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .time-badge {
      background-color: #374151;
      color: #f3f4f6;
    }

    .timezone {
      color: #9ca3af;
    }
  }
</style>

<script>
  interface SunriseSunsetResponse {
    results: {
      sunrise: string;
      sunset: string;
    };
    status: string;
  }

  class TimeBadgeController {
    private element: HTMLElement;
    private timeElement: HTMLElement;
    private sunIcon: HTMLElement;
    private moonIcon: HTMLElement;
    private timeInterval: number = 0;
    private updateDataInterval: number = 0;
    private midnightTimeout: number = 0;
    private sunrise: Date;
    private sunset: Date;

    constructor(element: HTMLElement) {
      this.element = element;
      const timeEl = element.querySelector('.time');
      const sunIconEl = element.querySelector('.sun-icon');
      const moonIconEl = element.querySelector('.moon-icon');

      if (!timeEl || !sunIconEl || !moonIconEl) {
        throw new Error('Required elements not found in TimeBadge');
      }

      this.timeElement = timeEl as HTMLElement;
      this.sunIcon = sunIconEl as HTMLElement;
      this.moonIcon = moonIconEl as HTMLElement;
      
      // Initialize times
      const sunriseStr = element.getAttribute('data-sunrise');
      const sunsetStr = element.getAttribute('data-sunset');

      if (!sunriseStr || !sunsetStr) {
        throw new Error('Sunrise/sunset data not provided');
      }

      this.sunrise = new Date(sunriseStr);
      this.sunset = new Date(sunsetStr);
      
      // Start updates
      this.startTimeUpdates();
      this.startDataUpdates();
    }

    private async fetchSunriseSunsetData(): Promise<void> {
      try {
        const latitude = this.element.getAttribute('data-latitude');
        const longitude = this.element.getAttribute('data-longitude');

        if (!latitude || !longitude) {
          throw new Error('Coordinates not provided');
        }

        const response = await fetch(
          `https://api.sunrisesunset.io/json?lat=${latitude}&lng=${longitude}&date=today`
        );
        const data: SunriseSunsetResponse = await response.json();

        if (data.status === 'OK') {
          this.sunrise = new Date(data.results.sunrise);
          this.sunset = new Date(data.results.sunset);
          
          // Update data attributes
          this.element.setAttribute('data-sunrise', data.results.sunrise);
          this.element.setAttribute('data-sunset', data.results.sunset);
        }
      } catch (error) {
        console.error('Failed to update sunrise/sunset data:', error);
      }
    }

    private updateDisplay(): void {
      const now = new Date();
      
      // Update time
      this.timeElement.textContent = now.toLocaleTimeString('en-US', { 
        hour: '2-digit', 
        minute: '2-digit'
      });

      // Update icon
      const isDaytime = now >= this.sunrise && now <= this.sunset;
      this.sunIcon.classList.toggle('hidden', !isDaytime);
      this.moonIcon.classList.toggle('hidden', isDaytime);
    }

    private startTimeUpdates(): void {
      // Update immediately
      this.updateDisplay();
      // Update every second
      this.timeInterval = window.setInterval(() => this.updateDisplay(), 1000);
    }

    private startDataUpdates(): void {
      // Calculate time until midnight
      const now = new Date();
      const tomorrow = new Date(now);
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(0, 0, 0, 0);
      const timeUntilMidnight = tomorrow.getTime() - now.getTime();

      // Initial update at midnight
      this.midnightTimeout = window.setTimeout(async () => {
        await this.fetchSunriseSunsetData();
        // Then update daily
        this.updateDataInterval = window.setInterval(
          () => this.fetchSunriseSunsetData(),
          24 * 60 * 60 * 1000 // 24 hours
        );
      }, timeUntilMidnight);
    }

    public cleanup(): void {
      window.clearInterval(this.timeInterval);
      window.clearInterval(this.updateDataInterval);
      window.clearTimeout(this.midnightTimeout);
    }
  }

  // Initialize the controller
  const timeBadge = document.querySelector('.time-badge');
  if (timeBadge instanceof HTMLElement) {
    const controller = new TimeBadgeController(timeBadge);

    // Cleanup on page navigation
    document.addEventListener('astro:before-swap', () => {
      controller.cleanup();
    });
  }
</script>