---
import Layout from '../../layouts/GalleryLayout.astro';
import { getFolderContents } from '../../utils/lib/cloudinary';
import { Image } from '@unpic/astro';

const { path = '' } = Astro.params;
const decodedPath = decodeURIComponent(path || '');

const { folders = [], images = [] } = await getFolderContents(decodedPath);

const pathParts = decodedPath ? decodedPath.split('/') : [];
const breadcrumbs = pathParts.map((part, index) => ({
  name: part,
  path: `/${pathParts.slice(0, index + 1).join('/')}`,
  isLast: index === pathParts.length - 1,
}));

const pageTitle =
  pathParts.length > 0
    ? `${pathParts[pathParts.length - 1].charAt(0).toUpperCase() +
      pathParts[pathParts.length - 1].slice(1)} | Judine Art`
    : 'Travels | Judine Art';

const validCategories = ['Caribbean', 'United States', 'Europe'];
const category = pathParts[0];
if (decodedPath && !validCategories.includes(category)) {
  return Astro.redirect('/404');
}

// Distribute images into columns
const columnCount = 3;
const columns = Array.from({ length: columnCount }, (_, i) =>
  images.filter((_, index) => index % columnCount === i)
);
---

<Layout title={pageTitle}>
  <!-- Breadcrumb Navigation -->
  <nav class='mb-6 flex items-center space-x-2 text-gray-600 dark:text-gray-400'>
    <a href='/travels' class='hover:text-gray-600 dark:hover:text-gray-300 transition-colors'>
      Travels
    </a>
    {
      breadcrumbs.map((crumb, index) => (
        <>
          <span>/</span>
          <a
            href={`/travels${crumb.path}`}
            class:list={[
              'hover:text-gray-600 dark:hover:text-gray-300 transition-colors',
              {
                'font-semibold text-gray-900 dark:text-gray-100': index === breadcrumbs.length - 1,
              },
            ]}
          >
            {crumb.name}
          </a>
        </>
      ))
    }
  </nav>

  <!-- Folders Grid -->
  {
    folders.length > 0 && (
      <section class='mb-12'>
        <h2 class='text-2xl font-bold mb-6 dark:text-white'>Folders</h2>
        <div class='grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4'>
          {folders.map((folder) => (
            <a
              href={`/travels/${folder.path}`}
              class='group block p-4 bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-all'
            >
              <div class='flex items-center space-x-3'>
                <svg
                  xmlns='http://www.w3.org/2000/svg'
                  class='h-8 w-8 text-yellow-500 group-hover:text-yellow-600 dark:text-yellow-400 dark:group-hover:text-yellow-300 transition-colors'
                  fill='none'
                  viewBox='0 0 24 24'
                  stroke='currentColor'
                >
                  <path
                    stroke-linecap='round'
                    stroke-linejoin='round'
                    stroke-width='2'
                    d='M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z'
                  />
                </svg>
                <span class='font-medium text-gray-900 dark:text-gray-100 group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-colors'>
                  {folder.name}
                </span>
              </div>
            </a>
          ))}
        </div>
      </section>
    )
  }

  <!-- Masonry Images Grid -->
  {
    images.length > 0 ? (
      <section class='mx-auto'>
        <div class='grid grid-cols-2 sm:grid-cols-3 gap-4'>
          {columns.map((column) => (
            <div class='flex flex-col gap-4'>
              {column.map((image) => (
                <div class='group relative overflow-hidden rounded-sm bg-gray-100 dark:bg-gray-800'>
                  <Image
                    src={image.url}
                    alt={image.public_id.split('/').pop() || 'Gallery image'}
                    class='w-full h-auto object-cover transition-transform duration-300 group-hover:scale-10'
                    loading='lazy'
                    layout='fullWidth'
                  />
                  <div class='absolute inset-0 bg-black opacity-0 group-hover:opacity-20 dark:group-hover:opacity-40 transition-opacity duration-300' />
                </div>
              ))}
            </div>
          ))}
        </div>
      </section>
    ) : (
      !folders.length && (
        <div class='text-center py-12'>
          <p class='text-gray-500 dark:text-gray-400 text-lg'>No images found in this folder.</p>
        </div>
      )
    )
  }

  <!-- Loading State -->
  <div
    id='loading'
    class='hidden fixed inset-0 bg-white dark:bg-gray-900 bg-opacity-75 dark:bg-opacity-75 flex items-center justify-center'
  >
    <div
      class='animate-spin rounded-full h-12 w-12 border-4 border-gray-500 dark:border-gray-400 border-t-transparent'
    >
    </div>
  </div>
</Layout>

<script>
  // Show loading state during navigation
  document.addEventListener('astro:before-preparation', () => {
    document.getElementById('loading')?.classList.remove('hidden');
  });

  document.addEventListener('astro:after-preparation', () => {
    document.getElementById('loading')?.classList.add('hidden');
  });

  // Optional: Add fade-in animation for images as they load
  document.addEventListener('astro:page-load', () => {
    const images = document.querySelectorAll('img');
    images.forEach((img) => {
      img.classList.add('opacity-0');
      img.addEventListener('load', () => {
        img.classList.remove('opacity-0');
        img.classList.add('opacity-100');
      });
    });
  });
</script>

<style>
  html {
    scroll-behavior: smooth;
  }

  img {
    transition: opacity 0.5s ease-in-out;
  }
</style>
